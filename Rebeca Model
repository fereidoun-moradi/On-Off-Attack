// smart car
reactiveclass SmartCar(5) {
    knownrebecs {
		OEM oem; 
    }
    statevars {
    	int uId, ctrTx, totalTx; 
    	boolean update;
    }
    SmartCar(int myId, int tTx) { //Note: tTx for a smart car is digit < 10
    	uId = myId;
    	totalTx = tTx;
    	ctrTx = 0; // It begin from 1
    	self.generateTx();
    }
    msgsrv generateTx(){
    	if (ctrTx < totalTx) {
    			ctrTx = ctrTx + 1;
    			oem.sendTx(uId, ctrTx); 
    			self.generateTx();
    		}
    }
    msgsrv updateBn(){
    	update = true;
    }
    
}





// Mal generation
reactiveclass MalTrxGenerator(5) {
    knownrebecs {
		MalSp oem; 
    }
    statevars {
		int uId, ctrTx, totalTx;
		boolean update;
    }
    MalTrxGenerator(int myId, int tTx) { //Note: tTx for Mal generation is digit > 10
    	uId = myId;
    	totalTx = tTx;
    	ctrTx = 9; // It begin from 10
    	self.generateTx();
    }
    msgsrv generateTx(){
    	if (ctrTx < totalTx) {
    			ctrTx = ctrTx + 1;
    			oem.sendTx(uId, ctrTx); 
    			self.generateTx();
    		}
    }
    msgsrv updateBn(){
    	update = true;
    }
}

reactiveclass Manager(100) {
    knownrebecs {
		OEM oem1;
		OEM oem2;
		OEM oem3;
		MalSp oem4;	
    }
    statevars {
    	int IDB;
    }
    Manager() { //Note: It generate Block ID
    	IDB = -1;
    }
    
    msgsrv selectID(int mId){
    	// there are 3 miner so it choose a random value among them
    	IDB ++;
    	if(mId == 1) {
			oem1.buildblk(IDB);
    	}
    	if(mId == 2) {
			oem2.buildblk(IDB);
    	}
     	if(mId == 3) {
			oem3.buildblk(IDB);
    	}
    	if(mId == 4) {
			oem4.buildblk(IDB);
    	}
 }
}

// honest miner
reactiveclass OEM(150) {
    knownrebecs {
		OEM oem1;
		OEM oem3;
		MalSp oem2;
		SmartCar u;
		Manager mgr;
    }
    statevars {
		int mId;
		int [50][8]BC; // minerID, BlockID, utx1, tx1, utx2, tx2, utx3, tx3
		int [70][3]pendingPool;// pending pool of valid transactions
		int [5]trustRate; // It stores direct trust rate
		int [3]uidtx; // Block size is 3. It maintains tree trx for block generation
		int [3]tx;   //
		int ctrTrx; // It counts the number of valid transactions in pending pool
		int nBlk;   // It count the number of blocks that are grenerated by a Miner
		int blockId;
		int randomSelection;
		boolean send; 
		int k, j, p, h, q;
		int as;
		boolean check;
		boolean go;
		boolean injection;
		boolean assertionfail;
		int [30][3]Ack;
    }
    OEM(int myId) {
    	mId = myId;
    	blockId = 1;
    	nBlk = 1;
		k = 0;
		j = 0;
		ctrTrx = 0;
		q = 50;
		p = 70;
		go = true;
		send = true;
		assertionfail = false;
		for (int l = 0; l < 5; l++) {
  				trustRate[l] = 0;
		}
		for (int l = 0; l < p; l++) {
  				pendingPool[l][0] = 0;
  				pendingPool[l][1] = 0;
  				pendingPool[l][2] = 0;
		}
		for (int l = 0; l < q; l++) 
			for(int m = 0; m < 8; m++){
  				BC[l][m] = 0;
		}
		for (int l = 0; l < 3; l++){
			uidtx[l] = 0;
			tx[l] = 0;
			 
		}	
		for (int l = 0; l < 30; l++) {
  				Ack[l][0] = 0;
  				Ack[l][1] = 0;
  				Ack[l][2] = 0;
		}	
    }
    msgsrv sendTx(int utx, int idTx) {
    	// It checks if this trx was already validated and has been inserted to the pending pool
    	check = true;
    	for (int l = 0; l < p; l++)
  			if (pendingPool[l][0] == utx && pendingPool[l][1] == idTx) {
  				check = false; 
  				break;
  			}
  		// It checks if this trx was already has been inserted to BC	
		for (int l = 0; l <= k; l++) 
  			if ((BC[l][2] == utx && BC[l][3] == idTx) || (BC[l][4] == utx && BC[l][5] == idTx) || (BC[l][6] == utx && BC[l][7] == idTx)) {
  				check = false; 
  				break;
  			}	
		// It checks validation of transaction and then add it to the pending pool(e.g. user & trx must be under 10)
		if (check) {
    		if (idTx < 10) {
    			if (utx < 10) {
    				for (int l = 0; l < p; l++) 
  						if (pendingPool[l][0] == 0) {
  							pendingPool[l][0] = utx;
  							pendingPool[l][1] = idTx;
  							ctrTrx++;
  							oem1.sendTx(utx, idTx);
  							oem2.sendTx(utx, idTx);
  							oem3.sendTx(utx, idTx);
  							if ((ctrTrx > 2) && (nBlk < 3) && (send == true)) {
  								nBlk ++; 
  								mgr.selectID(mId);
  								send = false;
  							} /*else mgr.selectRandomly(mId);*/
  							break;
  					}
    		    }
    	    }
    	}
    }
    msgsrv buildblk(int id) {
    		k = id;
    		blockId = id;	
    		h = 0;
    		go = true;
    		for (int l = 0; l < p; l++) {
  				if (pendingPool[l][0] != 0 && pendingPool[l][2] != 999) {
  					for (int f = 0; f <= k; f++) {
  						if ((BC[f][2] == pendingPool[l][0] && BC[f][3] == pendingPool[l][1]) || (BC[f][4] == pendingPool[l][0] && BC[f][5] == pendingPool[l][1]) || (BC[f][6] == pendingPool[l][0] && BC[f][7] == pendingPool[l][1])) {
  							go = false; 
  							break;
  						}	
					}
					if(go) {
  						uidtx[h] =  pendingPool[l][0];
  						tx[h] = pendingPool[l][1];
  						pendingPool[l][2] = 999;
  						ctrTrx--;
  						h++;
  						if(h == 3) {break;}
  					}	
  				}
  			}
  			if (h == 3) {
  				//self.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				BC[k][0] = mId;
				BC[k][1] = blockId;
				BC[k][2] = uidtx[0];
				BC[k][3] = tx[0];
				BC[k][4] = uidtx[1];
				BC[k][5] = tx[1];
				BC[k][6] = uidtx[2];
				BC[k][7] = tx[2];
  				oem1.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				oem2.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				oem3.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				//blockId = blockId + 1;
				//k = k + 1;
  			}
  			send = true;
    }
    msgsrv addtoBC(int mid, int blockid, int uidtx1, int tx1, int uidtx2, int tx2, int uidtx3, int tx3) {
		k = blockid;
		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx1 && pendingPool[l][1] == tx1 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break; 
  			}
  		} 
  		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx2 && pendingPool[l][1] == tx2 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break;
  			}
  		}	
  		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx3 && pendingPool[l][1] == tx3 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break;
  			}	
		} 		
    	if (trustRate[mid] == 0) {
    		if ((uidtx1 < 10) && (uidtx2 < 10) && (uidtx3 < 10)) {
    			if ((tx1 < 10) && (tx2 < 10) && (tx3 < 10)) {
					BC[k][0] = mid;
					BC[k][1] = blockid;
					BC[k][2] = uidtx1;
					BC[k][3] = tx1;
					BC[k][4] = uidtx2;
					BC[k][5] = tx2;
					BC[k][6] = uidtx3;
					BC[k][7] = tx3;
					trustRate[mid] = trustRate[mid] + 1;
					u.updateBn();		
    			} else trustRate[mid] = trustRate[mid] - 1;
    		}
		//k = k + 1;
		//blockId = blockId + 1;
    	} else 
    			if (trustRate[mid] == 1) {
    				if ((uidtx2 < 10) && (uidtx3 < 10)) {
    					if ((tx2 < 10) && (tx3 < 10)) {
							BC[k][0] = mid;
							BC[k][1] = blockid;
							BC[k][2] = uidtx1;
							BC[k][3] = tx1;
							BC[k][4] = uidtx2;
							BC[k][5] = tx2;
							BC[k][6] = uidtx3;
							BC[k][7] = tx3;	
							trustRate[mid] = trustRate[mid] + 1;
							u.updateBn();
							oem1.ack(mId,uidtx1,tx1);
    						oem2.ack(mId,uidtx1,tx1);
    						oem3.ack(mId,uidtx1,tx1);	
    					} else trustRate[mid] = trustRate[mid] - 1;
    					if ((tx1 >= 10)) {injection = true;}
    				}
    				//k = k + 1;
    				//blockId = blockId + 1;
    			} else 
    	if (trustRate[mid] == 2) { 
    	  	randomSelection = ?(1,2,3);
    	  	if(randomSelection == 1) {	
    			if (uidtx3 < 10) {
    				if (tx3 < 10) {
						BC[k][0] = mid;
						BC[k][1] = blockid;
						BC[k][2] = uidtx1;
						BC[k][3] = tx1;
						BC[k][4] = uidtx2;
						BC[k][5] = tx2;
						BC[k][6] = uidtx3;
						BC[k][7] = tx3;
						u.updateBn();
						oem1.ack(mId,uidtx1,tx1);
						oem1.ack(mId,uidtx2,tx2);
    					oem2.ack(mId,uidtx1,tx1);
    					oem2.ack(mId,uidtx2,tx2);
    					oem3.ack(mId,uidtx1,tx1);
    					oem3.ack(mId,uidtx2,tx2);	
						//trustRate[mid] = trustRate[mid] + 1;	
    				} else trustRate[mid] = trustRate[mid] - 1;
    				if ((tx2 >= 10) || (tx1 >= 10)) {injection = true;}
    			}
    		}	
    		if(randomSelection == 2) {
    		if (uidtx2 < 10) {
    				if (tx2 < 10) {
						BC[k][0] = mid;
						BC[k][1] = blockid;
						BC[k][2] = uidtx1;
						BC[k][3] = tx1;
						BC[k][4] = uidtx2;
						BC[k][5] = tx2;
						BC[k][6] = uidtx3;
						BC[k][7] = tx3;
						u.updateBn();
						oem1.ack(mId,uidtx1,tx1);
						oem1.ack(mId,uidtx3,tx3);
    					oem2.ack(mId,uidtx1,tx1);
    					oem2.ack(mId,uidtx3,tx3);
    					oem3.ack(mId,uidtx1,tx1);
    					oem3.ack(mId,uidtx3,tx3);	
						//trustRate[mid] = trustRate[mid] + 1;	
    				} else trustRate[mid] = trustRate[mid] - 1;
    				if ((tx1 >= 10) || (tx3 >= 10)) {injection = true;}
    			}
    		}
    		if(randomSelection == 3){
    		if (uidtx1 < 10) {
    				if (tx1 < 10) {
						BC[k][0] = mid;
						BC[k][1] = blockid;
						BC[k][2] = uidtx1;
						BC[k][3] = tx1;
						BC[k][4] = uidtx2;
						BC[k][5] = tx2;
						BC[k][6] = uidtx3;
						BC[k][7] = tx3;
						u.updateBn();
						oem1.ack(mId,uidtx2,tx2);
						oem1.ack(mId,uidtx3,tx3);
    					oem2.ack(mId,uidtx2,tx2);
    					oem2.ack(mId,uidtx3,tx3);
    					oem3.ack(mId,uidtx2,tx2);
    					oem3.ack(mId,uidtx3,tx3);	
						//trustRate[mid] = trustRate[mid] + 1;	
    				} else trustRate[mid] = trustRate[mid] - 1;
    				if ((tx2 >= 10) || (tx3 >= 10)) {injection = true;}
    			}
    		}	
    	//k = k + 1;
    	//blockId = blockId + 1;
        }
        send = true;
        if (blockId % 2 == 0) {
       		nBlk = 1;
       		}
       	if ((ctrTrx > 2) && (nBlk < 3)) { nBlk ++; mgr.selectID(mId);}
       	/*if ((ctrTrx > 2) && (nBlk < 3) && (send == true)) {
  			nBlk ++; 
  			mgr.selectRandomly(0);
  			send = false;
  			} else mgr.selectRandomly(mId);*/
       	
       }
       msgsrv ack(int m, int utx1, int idTx1){
    	for (int l = 0; l < 30; l++){
			if((Ack[l][0]!= m) && (Ack[l][1]!= utx1) && (Ack[l][2]!= idTx1)){
			 	if(Ack[l][0]== 0){
			 		Ack[l][0]= m; 
			 		Ack[l][1]= utx1; 
			 		Ack[l][2]= idTx1; 
			 		break;
			 		}
				}
			}
		as = 0;
		for (int d = 0; d < 30; d++){
			if((Ack[d][1]== utx1) && (Ack[d][2]== idTx1)){
			as++;
			}
		}
		if (as == 3) {assertionfail= true;}		
    	}	
}



// Malicious Miner 
reactiveclass MalSp(150) {
    knownrebecs {
		OEM oem1;
		OEM oem2;
		OEM oem3;
		MalTrxGenerator u;
		Manager mgr;
		
    }
    statevars {
		int mId;
		int [50][8]BC; // minerID, BlockkID, utx1, tx1, utx2, tx2, utx3, tx3
		int [70][3]pendingPool;// pending pool of valid transactions
		int p, q, as;
		int delay;
		int blockId;
		int k;
		int j;
		int [5]trustRate;
		boolean check;
		boolean send;
		int ctrTrx;
		int [3]uidtx;
		int [3]tx;
		int h;
		boolean go;
		int nBlk;
		int ctrMTrx;
		boolean injection;
		boolean assertionfail;
		int [30][3]Ack;
    }
    MalSp(int myId) {
    	mId = myId;
    	blockId = 1;
		k = 0;
		j = 0;
		ctrTrx = 0;
		p = 70;
		q = 50;
		go = true;
		send = true;
		assertionfail = false;
		nBlk = 1;
		ctrMTrx = 0;
		trustRate[0] = 0;
		trustRate[1] = 0;
		trustRate[2] = 0;
		trustRate[3] = 0;
		trustRate[4] = 0;
		for (int l = 0; l < p; l++) {
  				pendingPool[l][0] = 0;
  				pendingPool[l][1] = 0;
  				pendingPool[l][2] = 0;
		}
		for (int l = 0; l < 20; l++) {
  				BC[l][0] = 0;
  				BC[l][1] = 0;
  				BC[l][2] = 0;
  				BC[l][3] = 0;
  				BC[l][4] = 0;
  				BC[l][5] = 0;
  				BC[l][6] = 0;
  				BC[l][7] = 0;
		}
		for (int l = 0; l < 3; l++){
			uidtx[l] = 0;
			tx[l] = 0;
			 
		}
		for (int l = 0; l < 30; l++) {
  				Ack[l][0] = 0;
  				Ack[l][1] = 0;
  				Ack[l][2] = 0;
		}
		
    }
    msgsrv sendTx(int utx, int idTx) {
    	// It checks if this trx was already validated and inserted to the pending pool
    	check = true;
    	for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == utx && pendingPool[l][1] == idTx) {
  				check = false; 
  				break;
  			}	
		}
		for (int l = 0; l <= k; l++) {
  			if ((BC[l][2] == utx && BC[l][3] == idTx) || (BC[l][4] == utx && BC[l][5] == idTx) || (BC[l][6] == utx && BC[l][7] == idTx)) {
  				check = false; 
  				break;
  			}	
		}
		// It checks validation of transaction and then add it to the pool(e.g. user & trx must be under 10)
		if (check) {
    		if (idTx < 10) {
    			if (utx < 10) {
    				for (int l = 0; l < p; l++) {
  						if (pendingPool[l][0] == 0) {
  							pendingPool[l][0] = utx;
  							pendingPool[l][1] = idTx;
  							ctrTrx++;
  							oem1.sendTx(utx, idTx);
  							oem2.sendTx(utx, idTx);
  							oem3.sendTx(utx, idTx);
  							//if ((ctrTrx > 2) && (nBlk < 3)) { nBlk ++; self.buildblk();}
  							if ((ctrTrx > 2) && (nBlk < 3) && (send == true)) {
  								nBlk ++; 
  								//self.buildblk();
  								mgr.selectID(mId);
  								send = false;
  							} /*else mgr.selectRandomly(mId);*/
  							break;
  						}
  					}
    		    }
    	    } else 
    		     for (int l = 0; l < p; l++) {
  						if (pendingPool[l][0] == 0) {
  							pendingPool[l][0] = utx;
  							pendingPool[l][1] = idTx;
  							pendingPool[l][2] = 111;
  							ctrMTrx++;
  							if (((ctrTrx + ctrMTrx) > 2) && (nBlk < 3) && (trustRate[2] == 2) && (injection == false) ) {nBlk ++; mgr.selectID(mId); }
  							injection = true;
  							break;
  						}
  			  	 }
    	}
    }
    msgsrv buildblk(int id) {
    		k = id;
    		blockId = id;	
    		h = 0;
    		go = true;
    	if (trustRate[2] == 2) {
    		for (int l = 0; l < p; l++) {
  				if (pendingPool[l][0] != 0 && pendingPool[l][2] != 999) {
  					for (int f = 0; f <= k; f++) {
  						if ((BC[f][2] == pendingPool[l][0] && BC[f][3] == pendingPool[l][1]) || (BC[f][4] == pendingPool[l][0] && BC[f][5] == pendingPool[l][1]) || (BC[f][6] == pendingPool[l][0] && BC[f][7] == pendingPool[l][1])) {
  							go = false; 
  							break;
  						}	
					}
					if(go) {
  						uidtx[h] =  pendingPool[l][0];
  						tx[h] = pendingPool[l][1];
  						pendingPool[l][2] = 999;
  						ctrTrx--;
  						h++;
  						if(h == 3) {break;}
  					}	
  				}
  			}
  		} else
  			for (int l = 0; l < p; l++) {
  				if (pendingPool[l][0] != 0 && pendingPool[l][2] != 999 && pendingPool[l][2] != 111) {
  					for (int f = 0; f <= k; f++) {
  						if ((BC[f][2] == pendingPool[l][0] && BC[f][3] == pendingPool[l][1]) || (BC[f][4] == pendingPool[l][0] && BC[f][5] == pendingPool[l][1]) || (BC[f][6] == pendingPool[l][0] && BC[f][7] == pendingPool[l][1])) {
  							go = false; 
  							break;
  						}	
					}
					if(go) {
  						uidtx[h] =  pendingPool[l][0];
  						tx[h] = pendingPool[l][1];
  						pendingPool[l][2] = 999;
  						ctrTrx--;
  						h++;
  						if(h == 3) {break;}
  					}	
  				}
  			}
  			
  			if (h == 3) {
  				//self.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				BC[k][0] = mId;
				BC[k][1] = blockId;
				BC[k][2] = uidtx[0];
				BC[k][3] = tx[0];
				BC[k][4] = uidtx[1];
				BC[k][5] = tx[1];
				BC[k][6] = uidtx[2];
				BC[k][7] = tx[2];
  				oem1.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				oem2.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				oem3.addtoBC(mId, blockId, uidtx[0], tx[0], uidtx[1], tx[1], uidtx[2], tx[2]);
  				//blockId = blockId + 1;
				//k = k + 1;
  			}
  			send = true;
    }
    msgsrv addtoBC(int mid, int blockid, int uidtx1, int tx1, int uidtx2, int tx2, int uidtx3, int tx3) {
		k = blockid;
		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx1 && pendingPool[l][1] == tx1 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break; 
  			}
  		} 
  		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx2 && pendingPool[l][1] == tx2 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break;
  			}
  		}	
  		for (int l = 0; l < p; l++) {
  			if (pendingPool[l][0] == uidtx3 && pendingPool[l][1] == tx3 && pendingPool[l][2] != 999) {
  					pendingPool[l][2] = 999;
  					ctrTrx--;
  					break;
  			}	
		} 		
    	if (trustRate[mid] == 0) {
    		if ((uidtx1 < 10) && (uidtx2 < 10) && (uidtx3 < 10)) {
    			if ((tx1 < 10) && (tx2 < 10) && (tx3 < 10)) {
					BC[k][0] = mid;
					BC[k][1] = blockid;
					BC[k][2] = uidtx1;
					BC[k][3] = tx1;
					BC[k][4] = uidtx2;
					BC[k][5] = tx2;
					BC[k][6] = uidtx3;
					BC[k][7] = tx3;
					u.updateBn();
					trustRate[mid] = trustRate[mid] + 1;		
    			} else trustRate[mid] = trustRate[mid] - 1;
    		}
		//k = k + 1;
		//blockId = blockId + 1;
    	} else 
    			if (trustRate[mid] == 1) {
    				if ((uidtx2 < 10) && (uidtx3 < 10)) {
    					if ((tx2 < 10) && (tx3 < 10)) {
							BC[k][0] = mid;
							BC[k][1] = blockid;
							BC[k][2] = uidtx1;
							BC[k][3] = tx1;
							BC[k][4] = uidtx2;
							BC[k][5] = tx2;
							BC[k][6] = uidtx3;
							BC[k][7] = tx3;
							u.updateBn();	
							trustRate[mid] = trustRate[mid] + 1;
							oem1.ack(mId,uidtx1,tx1);
    						oem2.ack(mId,uidtx1,tx1);
    						oem3.ack(mId,uidtx1,tx1);	
    					} else trustRate[mid] = trustRate[mid] - 1;
    				}
    				//k = k + 1;
    				//blockId = blockId + 1;
    			} else 
    	if (trustRate[mid] == 2) {  		
    		if (uidtx2 < 10) {
    			if (tx2 < 10) {
					BC[k][0] = mid;
					BC[k][1] = blockid;
					BC[k][2] = uidtx1;
					BC[k][3] = tx1;
					BC[k][4] = uidtx2;
					BC[k][5] = tx2;
					BC[k][6] = uidtx3;
					BC[k][7] = tx3;
					u.updateBn();	
					//trustRate[mid] = trustRate[mid] + 1;
					oem1.ack(mId,uidtx1,tx1);
					oem1.ack(mId,uidtx3,tx3);
    				oem2.ack(mId,uidtx1,tx1);
    				oem2.ack(mId,uidtx3,tx3);
    				oem3.ack(mId,uidtx1,tx1);
    				oem3.ack(mId,uidtx3,tx3);	
    			} else trustRate[mid] = trustRate[mid] - 1;
    		}
    	//k = k + 1;
    	//blockId = blockId + 1;
        }
        send = true;
        if (blockId % 2 == 0) {
       		nBlk = 1;
       		}
       	if ((ctrTrx > 2) && (nBlk < 3)) { nBlk ++; mgr.selectID(mId);}
       	/*if ((ctrTrx > 2) && (nBlk < 3) && (send == true)) {
  			nBlk ++; 
  			mgr.selectRandomly(0);
  			send = false;
  			} else mgr.selectRandomly(mId);*/
       }
       msgsrv ack(int m, int utx1, int idTx1){
    	for (int l = 0; l < 30; l++){
			if((Ack[l][0]!= m) && (Ack[l][1]!= utx1) && (Ack[l][2]!= idTx1)){
			 	if(Ack[l][0]== 0){
			 		Ack[l][0]= m; 
			 		Ack[l][1]= utx1; 
			 		Ack[l][2]= idTx1; 
			 		break;
			 		}
				}
			}
		as = 0;
		for (int d = 0; d < 30; d++){
			if((Ack[d][1]== utx1) && (Ack[d][2]== idTx1)){
			as++;
			}
		}
		if (as == 3) {assertionfail= true;}		
    	}	
}  
main {
	SmartCar u1 (oem1): (1,3);
	SmartCar u2 (oem2): (2,9);
	SmartCar u3 (oem3): (3,5);
	MalTrxGenerator u (oem4): (4,10);
	OEM oem1(oem2,oem3,oem4,u1,man):(1);
	OEM oem2(oem1,oem3,oem4,u2,man):(2);
	OEM oem3(oem2,oem1,oem4,u3,man):(4);
	MalSp oem4(oem1,oem2,oem3,u,man):(3);
	Manager man(oem1, oem2, oem3, oem4):();
}
